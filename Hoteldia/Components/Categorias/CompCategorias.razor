@page "/category"
@using Microsoft.AspNetCore.Authorization
@using Modelos.DTO
@using Repositorio.IRespositorio
@inject ICategoriaRepositorio CategoriaRepositorio

@attribute [Authorize(Roles = "Administrador, Editor, Operador")]

<h1 class="text-center">Categorias</h1>
 <!--attribute [Authorize]Ahora solo los usuarios logeados podran entrar-->

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title text-dark">Lista Categorias</h4>
            </div>
            <AuthorizeView Roles="Administrador, Editor">
                <Authorized>
                <div class="col-3 offset-2">
                    <NavLink href="crear-categoria" class="btn btn-primary"><i class="bi bi-plus-circle-fill">Nueva categoria</i></NavLink>
                </div>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>

    <div class="card-body">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Descripcion</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (@categoriaDTO.Count() > 0)
                {
                    foreach (var categoria in categoriaDTO)
                    {
                        <tr>
                            <td>@categoria.Id</td>
                            <td>@categoria.NombreCategoria</td>
                            <td>@categoria.Descripcion</td>
                            <td>
                                <AuthorizeView Roles="Administrador, Editor">
                                    <Authorized>
                                        <NavLink href="@($"editar-categoria/{categoria.Id}")" class="btn btn-success"><i class="bi bi-gear-fill">Editar Categoria</i></NavLink>
                                        <button class="btn btn-danger" @onclick="()=>ManejadorOnBorrar(categoria.Id)"><i class="bi bi-trash-fill">Borrar</i></button>
                                    </Authorized>
                                </AuthorizeView>
                            </td>
                        </tr>
                    }
                } else
                {
                  <tr>
                      <td colspan="5">No hay registros</td>
                  </tr>  
                }
            </tbody>
        </table>
    </div>
</div>

@if (BorrarId != null)
{
    <div class="modal fade show d-block"
         tabindex="-1"
         style="background-color: rgba(0,0,0,0.5); position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; overflow: hidden; z-index: 1050;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">Confirmar Borrado</h5>
                    <button type="button" class="btn-close" @onclick="() => ClickBorrado(false)"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro que deseas borrar la categoría con ID <strong>@BorrarId</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => ClickBorrado(false)">Cancelar</button>
                    <button class="btn btn-danger" @onclick="() => ClickBorrado(true)">Borrar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<CategoriaDTO> categoriaDTO { get; set; } = new List<CategoriaDTO>();
    private int? BorrarId { get; set; }

    protected override async Task OnInitializedAsync()
    {

        //Recuperamos todas las categorias
        categoriaDTO = await CategoriaRepositorio.GetAllCategorias();
    }

    private void ManejadorOnBorrar(int categoriaId)
    {
        BorrarId = categoriaId;
    }

    private async Task ClickBorrado(bool confirm)
    {
        if (confirm && BorrarId != null)
        {
            await CategoriaRepositorio.BorrarCategoria(BorrarId.Value);
            categoriaDTO = await CategoriaRepositorio.GetAllCategorias();
        }

        BorrarId = null; // Cierra el modal
    }
}
