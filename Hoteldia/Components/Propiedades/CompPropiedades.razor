@page "/propiedades"
@using Microsoft.AspNetCore.Authorization
@using Modelos.DTO
@using Repositorio.IRespositorio
@inject IPropiedadRepositorio PropiedadRepositorio
@inject NavigationManager navigationManager
@inject ISubida subidaArchivo

@attribute [Authorize(Roles = "Administrador, Editor, Operador")]

<h1 class="text-center mb-4">Propiedades</h1>

<div class="card shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center flex-wrap">
        <h4 class="card-title text-dark mb-2 mb-md-0">Lista de Propiedades</h4>
        <AuthorizeView Roles="Administrador, Editor">
            <Authorized>
                <NavLink href="crear-propiedad" class="btn btn-primary">
                    <i class="bi bi-plus-circle me-1"></i> Nueva Propiedad
                </NavLink>
            </Authorized>
        </AuthorizeView>
    </div>

    <div class="card-body">
    <div class="mb-3">
        <input @bind="@filtroNombre"
               @bind:event="oninput"
               placeholder="🔍 Buscar por nombre..."
               class="form-control"
               style="border-radius: 8px;" />
    </div>

    <!-- Vista en tabla solo en pantallas medianas en adelante -->
    <div class="table-responsive d-none d-md-block">
        <table class="table table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Habitaciones</th>
                    <th>Baños</th>
                    <th>Latitud</th>
                    <th>Longitud</th>
                    <th>País</th>
                    <th>Lugar</th>
                    <th>Precio</th>
                    <th>Categoría</th>
                    <th>Activo</th>
                    <th class="text-center">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (propiedadDTO.Any())
                {
                    foreach (var propiedad in propiedadDTO.Where(h => string.IsNullOrWhiteSpace(filtroNombre) || h.Name.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase)))
                    {
                        <tr>
                            <td>@propiedad.Id</td>
                            <td>@propiedad.Name</td>
                            <td>@propiedad.Descripcion</td>
                            <td>@propiedad.Habitaciones</td>
                            <td>@propiedad.Banios</td>
                            <td>@propiedad.Latitude</td>
                            <td>@propiedad.Longitude</td>
                            <td>@propiedad.Country.Name</td>
                            <td>@propiedad.Place</td>
                            <td>@propiedad.Price €</td>
                            <td>@propiedad.Categoria.NombreCategoria</td>
                            <td>@(propiedad.Activo ? "✅" : "❌")</td>
                            <td class="text-center">
                                <AuthorizeView Roles="Administrador, Editor">
                                    <Authorized>
                                        <div class="d-flex flex-column flex-md-row gap-2 justify-content-center">
                                            <NavLink href="@($"editar-propiedad/{propiedad.Id}")" class="btn btn-success btn-sm">
                                                <i class="bi bi-gear-fill me-1"></i> Editar
                                            </NavLink>
                                            <button class="btn btn-danger btn-sm" @onclick="() => ManejadorOnBorrar(propiedad.Id)">
                                                <i class="bi bi-trash-fill me-1"></i> Borrar
                                            </button>
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="13" class="text-center text-muted">No hay registros disponibles</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Vista en tarjetas solo en pantallas chicas -->
    <div class="d-md-none">
        @if (propiedadDTO.Any())
        {
            foreach (var propiedad in propiedadDTO.Where(h => string.IsNullOrWhiteSpace(filtroNombre) || h.Name.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase)))
            {
                <div class="card mb-3 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">@propiedad.Name</h5>
                        <p class="card-text text-muted">@propiedad.Descripcion</p>
                        <ul class="list-unstyled mb-3">
                            <li><strong>Habitaciones:</strong> @propiedad.Habitaciones</li>
                            <li><strong>Baños:</strong> @propiedad.Banios</li>
                            <li><strong>País:</strong> @propiedad.Country.Name</li>
                            <li><strong>Lugar:</strong> @propiedad.Place</li>
                            <li><strong>Precio:</strong> @propiedad.Price €</li>
                            <li><strong>Categoría:</strong> @propiedad.Categoria.NombreCategoria</li>
                            <li><strong>Activo:</strong> @(propiedad.Activo ? "✅ Sí" : "❌ No")</li>
                        </ul>
                        <AuthorizeView Roles="Administrador, Editor">
                            <Authorized>
                                <div class="d-flex gap-2">
                                    <NavLink href="@($"editar-propiedad/{propiedad.Id}")" class="btn btn-success btn-sm w-50">
                                        <i class="bi bi-gear-fill"></i> Editar
                                    </NavLink>
                                    <button class="btn btn-danger btn-sm w-50" @onclick="() => ManejadorOnBorrar(propiedad.Id)">
                                        <i class="bi bi-trash-fill"></i> Borrar
                                    </button>
                                </div>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="alert alert-info">No hay registros disponibles</div>
        }
        </div>
    </div>
</div>

@if (BorrarId != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">⚠️ Confirmar Borrado</h5>
                    <button type="button" class="btn-close" @onclick="() => ClickBorrado(false)"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro que deseas borrar la propiedad con ID <strong>@BorrarId</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => ClickBorrado(false)">Cancelar</button>
                    <button class="btn btn-danger" @onclick="() => ClickBorrado(true)">Borrar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<PropiedadDTO> propiedadDTO { get; set; } = new List<PropiedadDTO>();
    private int? BorrarId { get; set; }
    private string filtroNombre = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        //Recuperamos todas las categorias
        propiedadDTO = await PropiedadRepositorio.GetAllPropiedads();
    }

    private async Task ManejadorOnBorrar(int propiedadId)
    {
        BorrarId = propiedadId;
    }

    public async Task ClickBorrado(bool confirm)
    {
        if (confirm && BorrarId != null)
        {
            //Borramos las imagenes asociadas a la propiedad

            PropiedadDTO prop = await PropiedadRepositorio.GetPropiedad(BorrarId.Value);
            foreach (var img in prop.ImagenPropiedad)
            {
                var nomImg = img.UrlImagen.Replace($"{navigationManager.BaseUri}Imagenes/", "");
                subidaArchivo.BorrarArchivo(nomImg);
            }

            await PropiedadRepositorio.BorrarPropiedad(BorrarId.Value);
            propiedadDTO = await PropiedadRepositorio.GetAllPropiedads();
        }

        BorrarId = null; // Oculta el modal
    }
}
