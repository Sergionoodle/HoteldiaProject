@page "/habitaciones/{propiedadId:int}"
@using Hoteldia.Modelos.DTO
@using Hoteldia.Repositorio.IRespositorio
@inject IHabitacionRepositorio HabitacionRepositorio
@inject IPropiedadRepositorio PropiedadRepositorio
@inject NavigationManager NavigationManager


<h3>Habitaciones de @propiedad?.Name</h3>

@if (habitaciones is null)
{
    <p>Cargando…</p>
}
else if (!habitaciones.Any())
{
    <p>No hay habitaciones registradas.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Cantidad disponible</th>
                <th>Precio/noche</th>
                <th>Descripción</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var h in habitaciones)
            {
                <tr>
                    <td>@h.Nombre</td>
                    <td>@h.CantidadDisponible</td>
                    <td>@h.PrecioPorNoche</td>
                    <td>@h.Descripcion</td>
                    <button class="btn btn-warning btn-sm" @onclick="() => EditarHabitacion(h.Id)">Editar</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => BorrarHabitacion(h.Id)">Borrar</button>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public int propiedadId { get; set; }
    private IEnumerable<HabitacionDTO> habitaciones;
    private PropiedadDTO propiedad;

    protected override async Task OnInitializedAsync()
    {
        habitaciones = await HabitacionRepositorio.GetAllHabitaciones(propiedadId);
        propiedad = await PropiedadRepositorio.GetPropiedad(propiedadId);
    }


    private void EditarHabitacion(int habitacionId)
    {
        NavigationManager.NavigateTo($"/editar-habitacion/{habitacionId}");
    }

    private async Task BorrarHabitacion(int habitacionId)
    {
        var resultado = await HabitacionRepositorio.BorrarHabitacion(habitacionId);
        if (resultado > 0)
        {
            // Refrescar la lista
            habitaciones = await HabitacionRepositorio.GetAllHabitaciones(propiedadId);
            StateHasChanged();
        }
    }
}
