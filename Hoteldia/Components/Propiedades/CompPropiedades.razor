@page "/propiedades"
@using Microsoft.AspNetCore.Authorization
@using Modelos.DTO
@using Repositorio.IRespositorio
@inject IPropiedadRepositorio PropiedadRepositorio
@inject NavigationManager navigationManager
@inject ISubida subidaArchivo
@inject IHabitacionRepositorio HabitacionRepositorio

@attribute [Authorize(Roles = "Administrador, Editor, Operador")]


<h1 class="text-center">Propiedades</h1>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title text-dark">Lista Propiedades</h4>
            </div>
            <div class="col-3 offset-2">
                <AuthorizeView Roles="Administrador, Editor">
                    <Authorized>
                        <NavLink href="crear-propiedad" class="btn btn-primary"><i class="bi bi-plus-circle-fill">Nueva propiedad</i></NavLink>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>

    <div class="card-body">
        <input @bind="@filtroNombre"
               @bind:event="oninput"
               placeholder="Buscar hotel por nombre..."
               class="form-control"
               style="margin-bottom: 20px; padding: 10px; border-radius: 8px; border: 1px solid #ccc; font-size: 1rem; width: 100%;" />

        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Descripcion</th>
                    <th>Habitaciones</th>
                    <th>Baños</th>
                    <th>Latitude</th>
                    <th>Longitude</th>
                    <th>País</th>
                    <th>Lugar</th>
                    <th>Precio</th>
                    <th>Categoría</th>
                    <th>Activo</th>
                </tr>
            </thead>
            <tbody>
                @if (@propiedadDTO.Count() > 0)
                {
                    foreach (var propiedad in propiedadDTO.Where(h => string.IsNullOrWhiteSpace(filtroNombre) || h.Name.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase)))
                    {
                        <tr>
                            <td>@propiedad.Id</td>
                            <td>@propiedad.Name</td>
                            <td>@propiedad.Descripcion</td>
                            <td>@propiedad.Habitaciones</td>
                            <td>@propiedad.Banios</td>
                            <td>@propiedad.Latitude</td>
                            <td>@propiedad.Longitude</td>
                            <td>@propiedad.Country.Name</td>
                            <td>@propiedad.Place</td>
                            <td>@propiedad.Price</td>
                            <td>@propiedad.Categoria.NombreCategoria</td>
                            <td>@(propiedad.Activo ? "✅" : "❌")</td>
                            <td>
                                <AuthorizeView Roles="Administrador, Editor">
                                    <Authorized>
                                        <NavLink href="@($"editar-propiedad/{propiedad.Id}")" class="btn btn-success mb-1"><i class="bi bi-gear-fill">Editar Propiedad</i></NavLink>
                                        <NavLink href="@($"crear-habitacion/{propiedad.Id}")" class="btn btn-primary mb-1">
                                            <i class="bi bi-door-open me-1"></i> Añadir Habitación
                                        </NavLink>
                                       
                                        <button class="btn btn-danger" @onclick="() => ManejadorOnBorrar(propiedad.Id)"><i class="bi bi-trash-fill">Borrar</i></button>
                                    </Authorized>
                                </AuthorizeView>
                                @if (HabitacionesPorPropiedad.ContainsKey(propiedad.Id) && HabitacionesPorPropiedad[propiedad.Id])
                                {
                                    <NavLink href="@($"habitaciones/{propiedad.Id}")" class="btn btn-outline-secondary btn-sm mt-1">
                                        Ver habitaciones
                                    </NavLink>
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No hay registros</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (BorrarId != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">Confirmar Borrado</h5>
                    <button type="button" class="btn-close" @onclick="() => ClickBorrado(false)"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro que deseas borrar la propiedad con ID <strong>@BorrarId</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => ClickBorrado(false)">Cancelar</button>
                    <button class="btn btn-danger" @onclick="() => ClickBorrado(true)">Borrar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<PropiedadDTO> propiedadDTO { get; set; } = new List<PropiedadDTO>();
    private bool estado { get; set; } = false;
    private int? BorrarId { get; set; }

    private Dictionary<int, bool> HabitacionesPorPropiedad = new();

    private string filtroNombre = string.Empty;

    protected override async Task OnInitializedAsync()
    {

        //Recuperamos todas las categorias
        propiedadDTO = await PropiedadRepositorio.GetAllPropiedads();

        foreach (var p in propiedadDTO)
        {
            var habitaciones = await HabitacionRepositorio.GetAllHabitaciones(p.Id);
            HabitacionesPorPropiedad[p.Id] = habitaciones != null && habitaciones.Any();
        }
    }


    private async Task ManejadorOnBorrar(int propiedadId)
    {
        BorrarId = propiedadId;
    }

    public async Task ClickBorrado(bool confirm)
    {
        if (confirm && BorrarId != null)
        {
            //Borramos las imagenes asociadas a la propiedad
            PropiedadDTO prop = await PropiedadRepositorio.GetPropiedad(BorrarId.Value);
            foreach (var img in prop.ImagenPropiedad)
            {
                var nomImg = img.UrlImagen.Replace($"{navigationManager.BaseUri}Imagenes/", "");
                subidaArchivo.BorrarArchivo(nomImg);
            }

            await PropiedadRepositorio.BorrarPropiedad(BorrarId.Value);
            propiedadDTO = await PropiedadRepositorio.GetAllPropiedads();
        }

        BorrarId = null; // Oculta el modal
    }

    public async Task<bool> CheckHabitacion(int idPropiedad)
    {
        var numeroHabitaciones = await HabitacionRepositorio.GetAllHabitaciones(idPropiedad);
        if(numeroHabitaciones.Count() < 0)
        {
            return false;
        }
        return true;
    }


}
